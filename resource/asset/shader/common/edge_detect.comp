#version 450

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba8) uniform readonly image2D color;
layout (binding = 1, rgba8) uniform image2D color_result;

float conv(in float kernel[9], in float data[9], in float denom, in float offset) {
  float res = 0.0;
  for (int i = 0; i < 9; ++i) {
    res += kernel[i] * data[i];
  }
  return clamp(res / denom + offset, 0.0, 1.0);
}

void main() {
  float avg[9];
  int index = 0;
  for (int i = -1; i < 2; ++i) {
    for (int j = -1; j < 2; ++j) {
      vec3 rgb = imageLoad(color, ivec2(gl_GlobalInvocationID.x + i, gl_GlobalInvocationID.y + j)).rgb;
      avg[index] = (rgb.r + rgb.g + rgb.b) / 3.0;
      ++index;
    }
  }

  float kernel[9];
  kernel[0] = -1.0/8.0; kernel[1] = -1.0/8.0; kernel[2] = -1.0/8.0;
	kernel[3] = -1.0/8.0; kernel[4] =  1.0;     kernel[5] = -1.0/8.0;
	kernel[6] = -1.0/8.0; kernel[7] = -1.0/8.0; kernel[8] = -1.0/8.0;

  vec4 res = vec4(vec3(conv(kernel, avg, 0.1, 0.0)), 1.0);

  imageStore(color_result, ivec2(gl_GlobalInvocationID.xy), res);
}